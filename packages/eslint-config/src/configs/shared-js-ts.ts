import { default as pluginEslintComments } from '@eslint-community/eslint-plugin-eslint-comments'
import { default as pluginTs } from '@typescript-eslint/eslint-plugin'
import { default as pluginDepend } from 'eslint-plugin-depend'
import { default as pluginImport } from 'eslint-plugin-import-x'
import { default as pluginJsdocComments } from 'eslint-plugin-jsdoc'
import { default as pluginNode } from 'eslint-plugin-n'
import { default as pluginPerfectionist } from 'eslint-plugin-perfectionist'
import * as pluginRegexp from 'eslint-plugin-regexp'
import { default as pluginUnicorn } from 'eslint-plugin-unicorn'

import type { Rules, TypedFlatConfigItem } from '../types'

/* eslint-disable ts/naming-convention */

const eslintJavascriptRecommendedRules: Rules = {
	// Begin expansion '@eslint/js' 'recommended'
	'constructor-super': 'error',
	'for-direction': 'error',
	'getter-return': 'error',
	'no-async-promise-executor': 'error',
	'no-case-declarations': 'error',
	'no-class-assign': 'error',
	'no-compare-neg-zero': 'error',
	'no-cond-assign': 'error',
	'no-const-assign': 'error',
	'no-constant-binary-expression': 'error',
	'no-constant-condition': 'error',
	'no-control-regex': 'error',
	'no-debugger': 'error',
	'no-delete-var': 'error',
	'no-dupe-args': 'error',
	'no-dupe-class-members': 'error',
	'no-dupe-else-if': 'error',
	'no-dupe-keys': 'error',
	'no-duplicate-case': 'error',
	'no-empty': 'error',
	'no-empty-character-class': 'error',
	'no-empty-pattern': 'error',
	'no-empty-static-block': 'error',
	'no-ex-assign': 'error',
	'no-extra-boolean-cast': 'error',
	'no-fallthrough': 'error',
	'no-func-assign': 'error',
	'no-global-assign': 'error',
	'no-import-assign': 'error',
	'no-invalid-regexp': 'error',
	'no-irregular-whitespace': 'error',
	'no-loss-of-precision': 'error',
	'no-misleading-character-class': 'error',
	'no-new-native-nonconstructor': 'error',
	'no-nonoctal-decimal-escape': 'error',
	'no-obj-calls': 'error',
	'no-octal': 'error',
	'no-prototype-builtins': 'error',
	'no-redeclare': 'error',
	'no-regex-spaces': 'error',
	'no-self-assign': 'error',
	'no-setter-return': 'error',
	'no-shadow-restricted-names': 'error',
	'no-sparse-arrays': 'error',
	'no-this-before-super': 'error',
	'no-undef': 'error',
	'no-unexpected-multiline': 'error',
	'no-unreachable': 'error',
	'no-unsafe-finally': 'error',
	'no-unsafe-negation': 'error',
	'no-unsafe-optional-chaining': 'error',
	'no-unused-labels': 'error',
	'no-unused-private-class-members': 'error',
	'no-unused-vars': 'error',
	'no-useless-backreference': 'error',
	'no-useless-catch': 'error',
	'no-useless-escape': 'error',
	'no-with': 'error',
	'require-yield': 'error',
	'use-isnan': 'error',
	'valid-typeof': 'error',
	// End expansion
}

const eslintTypescriptRecommendedOverridesRules: Rules = {
	// Begin expansion '@typescript-eslint/eslint-plugin' 'eslint-recommended.overrides[0]'
	'constructor-super': 'off',
	'getter-return': 'off',
	'no-class-assign': 'off',
	'no-const-assign': 'off',
	'no-dupe-args': 'off',
	'no-dupe-class-members': 'off',
	'no-dupe-keys': 'off',
	'no-func-assign': 'off',
	'no-import-assign': 'off',
	'no-new-native-nonconstructor': 'off',
	'no-new-symbol': 'off',
	'no-obj-calls': 'off',
	'no-redeclare': 'off',
	'no-setter-return': 'off',
	'no-this-before-super': 'off',
	'no-undef': 'off',
	'no-unreachable': 'off',
	'no-unsafe-negation': 'off',
	'no-var': 'error',
	'prefer-const': 'error',
	'prefer-rest-params': 'error',
	'prefer-spread': 'error',
	// End expansion
}

const eslintTypescriptStrictTypeCheckedRules: Rules = {
	// Begin expansion '@typescript-eslint/eslint-plugin' 'strict-type-checked'
	'no-array-constructor': 'off',
	'no-implied-eval': 'off',
	'no-return-await': 'off',
	'no-throw-literal': 'off',
	'no-unused-expressions': 'off',
	'no-unused-vars': 'off',
	'no-useless-constructor': 'off',
	'prefer-promise-reject-errors': 'off',
	'require-await': 'off',
	'ts/await-thenable': 'error',
	'ts/ban-ts-comment': ['error', { minimumDescriptionLength: 10 }],
	'ts/no-array-constructor': 'error',
	'ts/no-array-delete': 'error',
	'ts/no-base-to-string': 'error',
	'ts/no-confusing-void-expression': 'error',
	'ts/no-deprecated': 'error',
	'ts/no-duplicate-enum-values': 'error',
	'ts/no-duplicate-type-constituents': 'error',
	'ts/no-dynamic-delete': 'error',
	'ts/no-empty-object-type': 'error',
	'ts/no-explicit-any': 'error',
	'ts/no-extra-non-null-assertion': 'error',
	'ts/no-extraneous-class': 'error',
	'ts/no-floating-promises': 'error',
	'ts/no-for-in-array': 'error',
	'ts/no-implied-eval': 'error',
	'ts/no-invalid-void-type': 'error',
	'ts/no-meaningless-void-operator': 'error',
	'ts/no-misused-new': 'error',
	'ts/no-misused-promises': 'error',
	'ts/no-misused-spread': 'error',
	'ts/no-mixed-enums': 'error',
	'ts/no-namespace': 'error',
	'ts/no-non-null-asserted-nullish-coalescing': 'error',
	'ts/no-non-null-asserted-optional-chain': 'error',
	'ts/no-non-null-assertion': 'error',
	'ts/no-redundant-type-constituents': 'error',
	'ts/no-require-imports': 'error',
	'ts/no-this-alias': 'error',
	'ts/no-unnecessary-boolean-literal-compare': 'error',
	'ts/no-unnecessary-condition': 'error',
	'ts/no-unnecessary-template-expression': 'error',
	'ts/no-unnecessary-type-arguments': 'error',
	'ts/no-unnecessary-type-assertion': 'error',
	'ts/no-unnecessary-type-constraint': 'error',
	'ts/no-unnecessary-type-parameters': 'error',
	'ts/no-unsafe-argument': 'error',
	'ts/no-unsafe-assignment': 'error',
	'ts/no-unsafe-call': 'error',
	'ts/no-unsafe-declaration-merging': 'error',
	'ts/no-unsafe-enum-comparison': 'error',
	'ts/no-unsafe-function-type': 'error',
	'ts/no-unsafe-member-access': 'error',
	'ts/no-unsafe-return': 'error',
	'ts/no-unsafe-unary-minus': 'error',
	'ts/no-unused-expressions': 'error',
	'ts/no-unused-vars': 'error',
	'ts/no-useless-constructor': 'error',
	'ts/no-wrapper-object-types': 'error',
	'ts/only-throw-error': 'error',
	'ts/prefer-as-const': 'error',
	'ts/prefer-literal-enum-member': 'error',
	'ts/prefer-namespace-keyword': 'error',
	'ts/prefer-promise-reject-errors': 'error',
	'ts/prefer-reduce-type-parameter': 'error',
	'ts/prefer-return-this-type': 'error',
	'ts/related-getter-setter-pairs': 'error',
	'ts/require-await': 'error',
	'ts/restrict-plus-operands': [
		'error',
		{
			allowAny: false,
			allowBoolean: false,
			allowNullish: false,
			allowNumberAndString: false,
			allowRegExp: false,
		},
	],
	'ts/restrict-template-expressions': [
		'error',
		{
			allowAny: false,
			allowBoolean: false,
			allowNever: false,
			allowNullish: false,
			allowNumber: false,
			allowRegExp: false,
		},
	],
	'ts/return-await': ['error', 'error-handling-correctness-only'],
	'ts/triple-slash-reference': 'error',
	'ts/unbound-method': 'error',
	'ts/unified-signatures': 'error',
	'ts/use-unknown-in-catch-callback-variable': 'error',
	// End expansion
}

const eslintTypescriptStylisticTypeCheckedRules: Rules = {
	// Begin expansion '@typescript-eslint/eslint-plugin' 'stylistic-type-checked'
	'dot-notation': 'off',
	'no-empty-function': 'off',
	'ts/adjacent-overload-signatures': 'error',
	'ts/array-type': 'error',
	'ts/ban-tslint-comment': 'error',
	'ts/class-literal-property-style': 'error',
	'ts/consistent-generic-constructors': 'error',
	'ts/consistent-indexed-object-style': 'error',
	'ts/consistent-type-assertions': 'error',
	'ts/consistent-type-definitions': 'error',
	'ts/dot-notation': 'error',
	'ts/no-confusing-non-null-assertion': 'error',
	'ts/no-empty-function': 'error',
	'ts/no-inferrable-types': 'error',
	'ts/non-nullable-type-assertion-style': 'error',
	'ts/prefer-find': 'error',
	'ts/prefer-for-of': 'error',
	'ts/prefer-function-type': 'error',
	'ts/prefer-includes': 'error',
	'ts/prefer-nullish-coalescing': 'error',
	'ts/prefer-optional-chain': 'error',
	'ts/prefer-regexp-exec': 'error',
	'ts/prefer-string-starts-ends-with': 'error',
	// End expansion
}

const eslintTypescriptDisableTypeCheckedRules: Rules = {
	// Begin expansion '@typescript-eslint/eslint-plugin' 'disable-type-checked'
	'ts/await-thenable': 'off',
	'ts/consistent-return': 'off',
	'ts/consistent-type-exports': 'off',
	'ts/dot-notation': 'off',
	'ts/naming-convention': 'off',
	'ts/no-array-delete': 'off',
	'ts/no-base-to-string': 'off',
	'ts/no-confusing-void-expression': 'off',
	'ts/no-deprecated': 'off',
	'ts/no-duplicate-type-constituents': 'off',
	'ts/no-floating-promises': 'off',
	'ts/no-for-in-array': 'off',
	'ts/no-implied-eval': 'off',
	'ts/no-meaningless-void-operator': 'off',
	'ts/no-misused-promises': 'off',
	'ts/no-misused-spread': 'off',
	'ts/no-mixed-enums': 'off',
	'ts/no-redundant-type-constituents': 'off',
	'ts/no-unnecessary-boolean-literal-compare': 'off',
	'ts/no-unnecessary-condition': 'off',
	'ts/no-unnecessary-qualifier': 'off',
	'ts/no-unnecessary-template-expression': 'off',
	'ts/no-unnecessary-type-arguments': 'off',
	'ts/no-unnecessary-type-assertion': 'off',
	'ts/no-unnecessary-type-parameters': 'off',
	'ts/no-unsafe-argument': 'off',
	'ts/no-unsafe-assignment': 'off',
	'ts/no-unsafe-call': 'off',
	'ts/no-unsafe-enum-comparison': 'off',
	'ts/no-unsafe-member-access': 'off',
	'ts/no-unsafe-return': 'off',
	'ts/no-unsafe-type-assertion': 'off',
	'ts/no-unsafe-unary-minus': 'off',
	'ts/non-nullable-type-assertion-style': 'off',
	'ts/only-throw-error': 'off',
	'ts/prefer-destructuring': 'off',
	'ts/prefer-find': 'off',
	'ts/prefer-includes': 'off',
	'ts/prefer-nullish-coalescing': 'off',
	'ts/prefer-optional-chain': 'off',
	'ts/prefer-promise-reject-errors': 'off',
	'ts/prefer-readonly': 'off',
	'ts/prefer-readonly-parameter-types': 'off',
	'ts/prefer-reduce-type-parameter': 'off',
	'ts/prefer-regexp-exec': 'off',
	'ts/prefer-return-this-type': 'off',
	'ts/prefer-string-starts-ends-with': 'off',
	'ts/promise-function-async': 'off',
	'ts/related-getter-setter-pairs': 'off',
	'ts/require-array-sort-compare': 'off',
	'ts/require-await': 'off',
	'ts/restrict-plus-operands': 'off',
	'ts/restrict-template-expressions': 'off',
	'ts/return-await': 'off',
	'ts/strict-boolean-expressions': 'off',
	'ts/switch-exhaustiveness-check': 'off',
	'ts/unbound-method': 'off',
	'ts/use-unknown-in-catch-callback-variable': 'off',
	// End expansion
}

const nodeRecommendedRules: Rules = {
	// Begin expansion 'eslint-plugin-n' 'flat/recommended'
	'node/hashbang': 'error',
	'node/no-deprecated-api': 'error',
	'node/no-exports-assign': 'error',
	'node/no-extraneous-import': 'error',
	'node/no-extraneous-require': 'error',
	'node/no-missing-import': 'error',
	'node/no-missing-require': 'error',
	'node/no-process-exit': 'error',
	'node/no-unpublished-bin': 'error',
	'node/no-unpublished-import': 'error',
	'node/no-unpublished-require': 'error',
	'node/no-unsupported-features/es-builtins': 'error',
	'node/no-unsupported-features/es-syntax': ['error', { ignores: ['modules'] }],
	'node/no-unsupported-features/node-builtins': 'error',
	'node/process-exit-as-throw': 'error',
	// End expansion
}

const unicornRecommendedRules: Rules = {
	// Begin expansion 'eslint-plugin-unicorn' 'recommended'
	'no-negated-condition': 'off',
	'no-nested-ternary': 'off',
	'unicorn/better-regex': 'off',
	'unicorn/catch-error-name': 'error',
	'unicorn/consistent-destructuring': 'off',
	'unicorn/consistent-empty-array-spread': 'error',
	'unicorn/consistent-existence-index-check': 'error',
	'unicorn/consistent-function-scoping': 'error',
	'unicorn/custom-error-definition': 'off',
	'unicorn/empty-brace-spaces': 'error',
	'unicorn/error-message': 'error',
	'unicorn/escape-case': 'error',
	'unicorn/expiring-todo-comments': 'error',
	'unicorn/explicit-length-check': 'error',
	'unicorn/filename-case': 'error',
	'unicorn/import-style': 'error',
	'unicorn/new-for-builtins': 'error',
	'unicorn/no-abusive-eslint-disable': 'error',
	'unicorn/no-anonymous-default-export': 'error',
	'unicorn/no-array-callback-reference': 'error',
	'unicorn/no-array-for-each': 'error',
	'unicorn/no-array-method-this-argument': 'error',
	'unicorn/no-array-push-push': 'error',
	'unicorn/no-array-reduce': 'error',
	'unicorn/no-await-expression-member': 'error',
	'unicorn/no-await-in-promise-methods': 'error',
	'unicorn/no-console-spaces': 'error',
	'unicorn/no-document-cookie': 'error',
	'unicorn/no-empty-file': 'error',
	'unicorn/no-for-loop': 'error',
	'unicorn/no-hex-escape': 'error',
	'unicorn/no-instanceof-array': 'error',
	'unicorn/no-invalid-fetch-options': 'error',
	'unicorn/no-invalid-remove-event-listener': 'error',
	'unicorn/no-keyword-prefix': 'off',
	'unicorn/no-length-as-slice-end': 'error',
	'unicorn/no-lonely-if': 'error',
	'unicorn/no-magic-array-flat-depth': 'error',
	'unicorn/no-negated-condition': 'error',
	'unicorn/no-negation-in-equality-check': 'error',
	'unicorn/no-nested-ternary': 'error',
	'unicorn/no-new-array': 'error',
	'unicorn/no-new-buffer': 'error',
	'unicorn/no-null': 'error',
	'unicorn/no-object-as-default-parameter': 'error',
	'unicorn/no-process-exit': 'error',
	'unicorn/no-single-promise-in-promise-methods': 'error',
	'unicorn/no-static-only-class': 'error',
	'unicorn/no-thenable': 'error',
	'unicorn/no-this-assignment': 'error',
	'unicorn/no-typeof-undefined': 'error',
	'unicorn/no-unnecessary-await': 'error',
	'unicorn/no-unnecessary-polyfills': 'error',
	'unicorn/no-unreadable-array-destructuring': 'error',
	'unicorn/no-unreadable-iife': 'error',
	'unicorn/no-unused-properties': 'off',
	'unicorn/no-useless-fallback-in-spread': 'error',
	'unicorn/no-useless-length-check': 'error',
	'unicorn/no-useless-promise-resolve-reject': 'error',
	'unicorn/no-useless-spread': 'error',
	'unicorn/no-useless-switch-case': 'error',
	'unicorn/no-useless-undefined': 'error',
	'unicorn/no-zero-fractions': 'error',
	'unicorn/number-literal-case': 'error',
	'unicorn/numeric-separators-style': 'error',
	'unicorn/prefer-add-event-listener': 'error',
	'unicorn/prefer-array-find': 'error',
	'unicorn/prefer-array-flat': 'error',
	'unicorn/prefer-array-flat-map': 'error',
	'unicorn/prefer-array-index-of': 'error',
	'unicorn/prefer-array-some': 'error',
	'unicorn/prefer-at': 'error',
	'unicorn/prefer-blob-reading-methods': 'error',
	'unicorn/prefer-code-point': 'error',
	'unicorn/prefer-date-now': 'error',
	'unicorn/prefer-default-parameters': 'error',
	'unicorn/prefer-dom-node-append': 'error',
	'unicorn/prefer-dom-node-dataset': 'error',
	'unicorn/prefer-dom-node-remove': 'error',
	'unicorn/prefer-dom-node-text-content': 'error',
	'unicorn/prefer-event-target': 'error',
	'unicorn/prefer-export-from': 'error',
	'unicorn/prefer-global-this': 'error',
	'unicorn/prefer-includes': 'error',
	'unicorn/prefer-json-parse-buffer': 'off',
	'unicorn/prefer-keyboard-event-key': 'error',
	'unicorn/prefer-logical-operator-over-ternary': 'error',
	'unicorn/prefer-math-min-max': 'error',
	'unicorn/prefer-math-trunc': 'error',
	'unicorn/prefer-modern-dom-apis': 'error',
	'unicorn/prefer-modern-math-apis': 'error',
	'unicorn/prefer-module': 'error',
	'unicorn/prefer-native-coercion-functions': 'error',
	'unicorn/prefer-negative-index': 'error',
	'unicorn/prefer-node-protocol': 'error',
	'unicorn/prefer-number-properties': 'error',
	'unicorn/prefer-object-from-entries': 'error',
	'unicorn/prefer-optional-catch-binding': 'error',
	'unicorn/prefer-prototype-methods': 'error',
	'unicorn/prefer-query-selector': 'error',
	'unicorn/prefer-reflect-apply': 'error',
	'unicorn/prefer-regexp-test': 'error',
	'unicorn/prefer-set-has': 'error',
	'unicorn/prefer-set-size': 'error',
	'unicorn/prefer-spread': 'error',
	'unicorn/prefer-string-raw': 'error',
	'unicorn/prefer-string-replace-all': 'error',
	'unicorn/prefer-string-slice': 'error',
	'unicorn/prefer-string-starts-ends-with': 'error',
	'unicorn/prefer-string-trim-start-end': 'error',
	'unicorn/prefer-structured-clone': 'error',
	'unicorn/prefer-switch': 'error',
	'unicorn/prefer-ternary': 'error',
	'unicorn/prefer-top-level-await': 'error',
	'unicorn/prefer-type-error': 'error',
	'unicorn/prevent-abbreviations': 'error',
	'unicorn/relative-url-style': 'error',
	'unicorn/require-array-join-separator': 'error',
	'unicorn/require-number-to-fixed-digits-argument': 'error',
	'unicorn/require-post-message-target-origin': 'off',
	'unicorn/string-content': 'off',
	'unicorn/switch-case-braces': 'error',
	'unicorn/template-indent': 'error',
	'unicorn/text-encoding-identifier-case': 'error',
	'unicorn/throw-new-error': 'error',
	// End expansion
}

// Rule fishing shenanigans pending https://github.com/xojs/eslint-config-xo-typescript/issues/87
const xoJavascriptRules: Rules = {
	// Begin expansion 'eslint-config-xo-typescript' '[0].rules'
	'accessor-pairs': ['error', { enforceForClassMembers: true }],
	'array-callback-return': ['error', { allowImplicit: true }],
	'arrow-body-style': 'error',
	'block-scoped-var': 'error',
	// "@stylistic/array-bracket-newline":["error","consistent"],
	// "@stylistic/array-bracket-spacing":["error","never"],
	// "@stylistic/array-element-newline":["error","consistent"],
	// "@stylistic/brace-style":["error","1tbs",{"allowSingleLine":false}],
	camelcase: ['error', { properties: 'always' }],
	'capitalized-comments': [
		'error',
		'always',
		{
			ignoreConsecutiveComments: true,
			ignoreInlineComments: true,
			ignorePattern: String.raw`pragma|ignore|prettier-ignore|webpack\w+:|c8|type-coverage:`,
		},
	],
	complexity: 'warn',
	// "@stylistic/arrow-parens":["error","as-needed"],
	// "@stylistic/arrow-spacing":["error",{"before":true,"after":true}],
	// "@stylistic/block-spacing":["error","never"],
	'constructor-super': 'error',
	curly: 'error',
	'default-case': 'error',
	'default-case-last': 'error',
	'dot-notation': 'error',
	// "@stylistic/dot-location":["error","property"],
	eqeqeq: 'error',
	// "@stylistic/comma-dangle":["error","always-multiline"],
	'for-direction': 'error',
	// "@stylistic/comma-spacing":["error",{"before":false,"after":true}],
	// "@stylistic/comma-style":["error","last"],
	// "@stylistic/computed-property-spacing":["error","never",{"enforceForClassMembers":true}],
	// "@stylistic/eol-last":"error",
	// "@stylistic/function-call-spacing":["error","never"],
	// "@stylistic/function-paren-newline":["error","multiline"],
	'func-name-matching': ['error', { considerPropertyDescriptor: true }],
	'func-names': ['error', 'never'],
	'getter-return': 'error',
	'grouped-accessor-pairs': ['error', 'getBeforeSet'],
	'guard-for-in': 'error',
	// "@stylistic/function-call-argument-newline":["error","consistent"],
	// "@stylistic/indent":["error","tab",{"SwitchCase":1}],
	// "@stylistic/jsx-quotes":["error","prefer-single"],
	// "@stylistic/key-spacing":["error",{"beforeColon":false,"afterColon":true}],
	// "@stylistic/keyword-spacing":"error",
	// "@stylistic/linebreak-style":["error","unix"],
	// "@stylistic/lines-between-class-members":["error",{"enforce":[{"blankLine":"always","prev":"*","next":"method"},{"blankLine":"always","prev":"method","next":"field"},{"blankLine":"never","prev":"field","next":"field"}]}],
	'logical-assignment-operators': ['error', 'always', { enforceForIfStatements: true }],
	'max-depth': 'warn',
	// "@stylistic/max-len":["warn",{"code":200,"ignoreComments":true,"ignoreUrls":true}],
	'max-lines': ['warn', { max: 1500, skipComments: true }],
	'max-nested-callbacks': ['warn', 4],
	'max-params': ['warn', { max: 4 }],
	// "@stylistic/max-statements-per-line":"error",
	'new-cap': ['error', { capIsNew: true, newIsCap: true }],
	'no-alert': 'error',
	// "@stylistic/multiline-ternary":["error","always-multiline"],
	// "@stylistic/new-parens":"error",
	'no-array-constructor': 'error',
	'no-async-promise-executor': 'error',
	'no-await-in-loop': 'error',
	'no-bitwise': 'error',
	'no-buffer-constructor': 'error',
	'no-caller': 'error',
	'no-case-declarations': 'error',
	// "@stylistic/generator-star-spacing":["error","both"],
	'no-class-assign': 'error',
	'no-compare-neg-zero': 'error',
	'no-cond-assign': 'error',
	'no-const-assign': 'error',
	'no-constant-binary-expression': 'error',
	'no-constant-condition': 'error',
	'no-constructor-return': 'error',
	'no-control-regex': 'error',
	'no-debugger': 'error',
	'no-delete-var': 'error',
	'no-dupe-args': 'error',
	'no-dupe-class-members': 'error',
	'no-dupe-else-if': 'error',
	'no-dupe-keys': 'error',
	'no-duplicate-case': 'error',
	'no-else-return': ['error', { allowElseIf: false }],
	'no-empty': ['error', { allowEmptyCatch: true }],
	'no-empty-character-class': 'error',
	'no-empty-pattern': 'error',
	'no-empty-static-block': 'error',
	'no-eq-null': 'error',
	'no-eval': 'error',
	'no-ex-assign': 'error',
	'no-extend-native': 'error',
	'no-extra-bind': 'error',
	'no-extra-boolean-cast': 'error',
	'no-extra-label': 'error',
	'no-fallthrough': 'error',
	// "@stylistic/no-extra-semi":"error",
	'no-func-assign': 'error',
	// "@stylistic/no-floating-decimal":"error",
	'no-global-assign': 'error',
	'no-implicit-coercion': 'error',
	'no-implicit-globals': 'error',
	'no-implied-eval': 'error',
	'no-import-assign': 'error',
	'no-inner-declarations': 'error',
	'no-invalid-regexp': 'error',
	'no-irregular-whitespace': 'error',
	'no-iterator': 'error',
	'no-label-var': 'error',
	'no-labels': 'error',
	'no-lone-blocks': 'error',
	'no-lonely-if': 'error',
	'no-loss-of-precision': 'error',
	'no-misleading-character-class': 'error',
	// "@stylistic/no-mixed-operators":"error",
	// "@stylistic/no-mixed-spaces-and-tabs":"error",
	'no-multi-assign': 'error',
	// "@stylistic/no-multi-spaces":"error",
	'no-multi-str': 'error',
	// "@stylistic/no-multiple-empty-lines":["error",{"max":1}],
	'no-negated-condition': 'error',
	'no-new': 'error',
	'no-new-func': 'error',
	'no-new-native-nonconstructor': 'error',
	'no-new-wrappers': 'error',
	'no-nonoctal-decimal-escape': 'error',
	'no-obj-calls': 'error',
	'no-object-constructor': 'error',
	'no-octal': 'error',
	'no-octal-escape': 'error',
	'no-promise-executor-return': 'error',
	'no-proto': 'error',
	'no-prototype-builtins': 'error',
	'no-redeclare': 'error',
	'no-regex-spaces': 'error',
	'no-restricted-globals': [
		'error',
		'event',
		{
			message:
				'This API is deprecated. Use https://github.com/sindresorhus/uint8array-extras instead.',
			name: 'atob',
		},
		{
			message:
				'This API is deprecated. Use https://github.com/sindresorhus/uint8array-extras instead.',
			name: 'btoa',
		},
	],
	'no-restricted-imports': [
		'error',
		'domain',
		'freelist',
		'smalloc',
		'punycode',
		'sys',
		'querystring',
		'colors',
	],
	'no-return-assign': ['error', 'always'],
	'no-return-await': 'error',
	'no-script-url': 'error',
	'no-self-assign': ['error', { props: true }],
	'no-self-compare': 'error',
	'no-sequences': 'error',
	'no-setter-return': 'error',
	'no-shadow-restricted-names': 'error',
	'no-sparse-arrays': 'error',
	'no-template-curly-in-string': 'error',
	'no-this-before-super': 'error',
	'no-throw-literal': 'error',
	'no-undef': ['error', { typeof: true }],
	'no-undef-init': 'error',
	'no-unexpected-multiline': 'error',
	'no-unmodified-loop-condition': 'error',
	// "@stylistic/no-whitespace-before-property":"error",
	// "@stylistic/no-trailing-spaces":"error",
	'no-unneeded-ternary': 'error',
	'no-unreachable': 'error',
	'no-unreachable-loop': 'error',
	'no-unsafe-finally': 'error',
	'no-unsafe-negation': ['error', { enforceForOrderingRelations: true }],
	'no-unsafe-optional-chaining': ['error', { disallowArithmeticOperators: true }],
	'no-unused-expressions': ['error', { enforceForJSX: true }],
	'no-unused-labels': 'error',
	'no-unused-vars': [
		'error',
		{
			args: 'after-used',
			argsIgnorePattern: '^_',
			caughtErrors: 'all',
			caughtErrorsIgnorePattern: '^_$',
			ignoreRestSiblings: true,
			vars: 'all',
			varsIgnorePattern: '^_',
		},
	],
	'no-useless-backreference': 'error',
	'no-useless-call': 'error',
	'no-useless-catch': 'error',
	'no-useless-computed-key': ['error', { enforceForClassMembers: true }],
	'no-useless-concat': 'error',
	'no-useless-constructor': 'error',
	'no-useless-escape': 'error',
	'no-useless-rename': 'error',
	'no-useless-return': 'error',
	'no-var': 'error',
	'no-void': 'error',
	'no-warning-comments': 'warn',
	'no-with': 'error',
	'object-shorthand': ['error', 'always', { avoidExplicitReturnArrows: true }],
	// "@stylistic/object-curly-spacing":["error","never"],
	// "@stylistic/object-curly-newline":["error",{"ObjectExpression":{"multiline":true,"minProperties":4,"consistent":true},"ObjectPattern":{"multiline":true,"consistent":true},"ImportDeclaration":{"multiline":true,"minProperties":4,"consistent":true},"ExportDeclaration":{"multiline":true,"minProperties":4,"consistent":true}}],
	'one-var': ['error', 'never'],
	// "@stylistic/one-var-declaration-per-line":"error",
	'operator-assignment': ['error', 'always'],
	'prefer-arrow-callback': ['error', { allowNamedFunctions: true }],
	'prefer-const': ['error', { destructuring: 'all' }],
	'prefer-destructuring': [
		'error',
		{
			AssignmentExpression: { array: false, object: false },
			VariableDeclarator: { array: false, object: true },
		},
		{ enforceForRenamedProperties: false },
	],
	// "@stylistic/operator-linebreak":["error","before"],
	// "@stylistic/padded-blocks":["error","never",{"allowSingleLineBlocks":false}],
	// "@stylistic/padding-line-between-statements":["error",{"blankLine":"always","prev":"multiline-block-like","next":"*"}],
	'prefer-exponentiation-operator': 'error',
	'prefer-numeric-literals': 'error',
	'prefer-object-has-own': 'error',
	'prefer-object-spread': 'error',
	'prefer-promise-reject-errors': ['error', { allowEmptyReject: true }],
	'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
	'prefer-rest-params': 'error',
	'prefer-spread': 'error',
	radix: 'error',
	'require-yield': 'error',
	// "@stylistic/rest-spread-spacing":["error","never"],
	'symbol-description': 'error',
	// "@stylistic/quote-props":["error","as-needed"],
	// "@stylistic/quotes":["error","single"],
	// "@stylistic/semi-spacing":["error",{"before":false,"after":true}],
	// "@stylistic/semi-style":["error","last"],
	// "@stylistic/semi":["error","always"],
	// "@stylistic/space-before-blocks":["error","always"],
	// "@stylistic/space-before-function-paren":["error",{"anonymous":"always","named":"never","asyncArrow":"always"}],
	// "@stylistic/space-in-parens":["error","never"],
	// "@stylistic/space-infix-ops":"error",
	// "@stylistic/space-unary-ops":"error",
	// "@stylistic/spaced-comment":["error","always",{"line":{"exceptions":["-","+","*"],"markers":["!","/","=>"]},"block":{"exceptions":["-","+","*"],"markers":["!","*"],"balanced":true}}],
	// "@stylistic/switch-colon-spacing":["error",{"after":true,"before":false}],
	// "@stylistic/template-tag-spacing":["error","never"],
	'unicode-bom': ['error', 'never'],
	'use-isnan': 'error',
	'valid-typeof': ['error', { requireStringLiterals: false }],
	// "@stylistic/wrap-iife":["error","inside",{"functionPrototypeMethods":true}],
	yoda: 'error',
	// "@stylistic/template-curly-spacing":"error",
	// "@stylistic/yield-star-spacing":["error","both"],
	// "@stylistic/indent-binary-ops":["error","tab"],
	// End expansion
}

const xoTypescriptRules: Rules = {
	// Begin expansion 'eslint-config-xo-typescript' '[1].rules'
	'brace-style': 'off',
	camelcase: 'off',
	// "@stylistic/brace-style":["error","1tbs",{"allowSingleLine":false}],
	'comma-dangle': 'off',
	// "@stylistic/comma-dangle":["error","always-multiline"],
	'comma-spacing': 'off',
	// "@stylistic/space-before-blocks":["error","always"],
	'default-case': 'off',
	// "@stylistic/comma-spacing":["error",{"before":false,"after":true}],
	'default-param-last': 'off',
	'dot-notation': 'off',
	'func-call-spacing': 'off',
	'import/named': 'off',
	'import/namespace': 'off',
	// "@stylistic/func-call-spacing":["error","never"],
	indent: 'off',
	// "@stylistic/indent":["error","tab",{"SwitchCase":1}],
	'keyword-spacing': 'off',
	// "@stylistic/keyword-spacing":"error",
	'lines-between-class-members': 'off',
	'no-array-constructor': 'off',
	'no-constant-condition': 'error',
	'no-dupe-class-members': 'off',
	'no-duplicate-imports': 'off',
	'no-empty-function': 'off',
	'no-extra-parens': 'off',
	'no-extra-semi': 'off',
	// "@stylistic/no-extra-semi":"error",
	'no-loop-func': 'off',
	'no-redeclare': 'off',
	'no-restricted-imports': 'off',
	'no-throw-literal': 'off',
	// "@stylistic/type-generic-spacing":"error",
	// "@stylistic/type-named-tuple-spacing":"error",
	'no-undef': 'off',
	'no-unused-expressions': 'off',
	'no-unused-vars': 'off',
	'no-useless-constructor': 'off',
	'no-void': ['error', { allowAsStatement: true }],
	'node/no-unsupported-features/es-builtins': 'off',
	'node/no-unsupported-features/es-syntax': 'off',
	'object-curly-spacing': 'off',
	// "@stylistic/object-curly-spacing":["error","never"],
	'padding-line-between-statements': 'off',
	'prefer-promise-reject-errors': 'off',
	quotes: 'off',
	// "@stylistic/space-infix-ops":"error",
	semi: 'off',
	// "@stylistic/semi":["error","always"],
	'space-before-blocks': 'off',
	'space-before-function-paren': 'off',
	// "@stylistic/space-before-function-paren":["error",{"anonymous":"always","named":"never","asyncArrow":"always"}],
	'space-infix-ops': 'off',
	'ts/adjacent-overload-signatures': 'error',
	'ts/array-type': ['error', { default: 'array-simple' }],
	'ts/await-thenable': 'error',
	'ts/ban-ts-comment': [
		'error',
		{
			minimumDescriptionLength: 4,
			'ts-expect-error': 'allow-with-description',
		},
	],
	'ts/ban-tslint-comment': 'error',
	'ts/class-literal-property-style': ['error', 'getters'],
	'ts/consistent-generic-constructors': ['error', 'constructor'],
	'ts/consistent-indexed-object-style': 'error',
	'ts/consistent-type-assertions': [
		'error',
		{ assertionStyle: 'as', objectLiteralTypeAssertions: 'allow-as-parameter' },
	],
	'ts/consistent-type-definitions': ['error', 'type'],
	'ts/consistent-type-exports': ['error', { fixMixedExportsWithInlineTypeSpecifier: true }],
	'ts/consistent-type-imports': ['error', { fixStyle: 'inline-type-imports' }],
	'ts/default-param-last': 'error',
	'ts/dot-notation': 'error',
	// "@stylistic/lines-between-class-members":["error","always",{"exceptAfterSingleLine":true}],
	// "@stylistic/member-delimiter-style":["error",{"multiline":{"delimiter":"semi","requireLast":true},"singleline":{"delimiter":"semi","requireLast":false}}],
	'ts/member-ordering': [
		'error',
		{
			default: [
				'signature',
				'public-static-field',
				'public-static-method',
				'protected-static-field',
				'protected-static-method',
				'private-static-field',
				'private-static-method',
				'static-field',
				'static-method',
				'public-decorated-field',
				'public-instance-field',
				'public-abstract-field',
				'public-field',
				'protected-decorated-field',
				'protected-instance-field',
				'protected-abstract-field',
				'protected-field',
				'private-decorated-field',
				'private-instance-field',
				'private-field',
				'instance-field',
				'abstract-field',
				'decorated-field',
				'field',
				'public-constructor',
				'protected-constructor',
				'private-constructor',
				'constructor',
				'public-decorated-method',
				'public-instance-method',
				'public-abstract-method',
				'public-method',
				'protected-decorated-method',
				'protected-instance-method',
				'protected-abstract-method',
				'protected-method',
				'private-decorated-method',
				'private-instance-method',
				'private-method',
				'instance-method',
				'abstract-method',
				'decorated-method',
				'method',
			],
		},
	],
	'ts/naming-convention': [
		'error',
		{
			filter: { match: false, regex: '[- ]' },
			format: ['strictCamelCase'],
			leadingUnderscore: 'allowSingleOrDouble',
			selector: [
				'variable',
				'function',
				'classProperty',
				'objectLiteralProperty',
				'parameterProperty',
				'classMethod',
				'objectLiteralMethod',
				'typeMethod',
				'accessor',
			],
			trailingUnderscore: 'allow',
		},
		{ format: ['StrictPascalCase'], selector: 'typeLike' },
		{
			format: ['StrictPascalCase'],
			prefix: ['is', 'has', 'can', 'should', 'will', 'did'],
			selector: 'variable',
			types: ['boolean'],
		},
		{
			filter: '^(?!I)[A-Z]',
			format: ['StrictPascalCase'],
			selector: 'interface',
		},
		{
			filter: '^T$|^[A-Z][a-zA-Z]+$',
			format: ['StrictPascalCase'],
			selector: 'typeParameter',
		},
		{
			format: null,
			modifiers: ['requiresQuotes'],
			selector: ['classProperty', 'objectLiteralProperty'],
		},
	],
	'ts/no-array-constructor': 'error',
	'ts/no-array-delete': 'error',
	'ts/no-base-to-string': 'error',
	'ts/no-confusing-void-expression': 'error',
	'ts/no-deprecated': 'error',
	'ts/no-dupe-class-members': 'error',
	'ts/no-duplicate-enum-values': 'error',
	'ts/no-duplicate-type-constituents': 'error',
	'ts/no-dynamic-delete': 'error',
	'ts/no-empty-function': 'error',
	'ts/no-empty-interface': ['error', { allowSingleExtends: true }],
	'ts/no-empty-object-type': 'error',
	'ts/no-extra-non-null-assertion': 'error',
	'ts/no-extraneous-class': [
		'error',
		{
			allowConstructorOnly: false,
			allowEmpty: false,
			allowStaticOnly: false,
			allowWithDecorator: true,
		},
	],
	'ts/no-floating-promises': [
		'error',
		{ checkThenables: true, ignoreIIFE: true, ignoreVoid: true },
	],
	'ts/no-for-in-array': 'error',
	'ts/no-inferrable-types': 'error',
	'ts/no-loop-func': 'error',
	'ts/no-meaningless-void-operator': 'error',
	'ts/no-misused-new': 'error',
	'ts/no-misused-promises': ['error', { checksConditionals: true, checksVoidReturn: false }],
	'ts/no-namespace': 'error',
	'ts/no-non-null-asserted-nullish-coalescing': 'error',
	'ts/no-non-null-asserted-optional-chain': 'error',
	'ts/no-redeclare': 'error',
	'ts/no-require-imports': 'error',
	'ts/no-restricted-imports': [
		'error',
		{
			paths: ['error', 'domain', 'freelist', 'smalloc', 'punycode', 'sys', 'querystring', 'colors'],
		},
	],
	'ts/no-restricted-types': [
		'error',
		{
			types: {
				'[[[[[]]]]]': '🦄💥',
				'[[[[]]]]': 'ur drunk 🤡',
				'[[[]]]': "Don't use `[[[]]]`. Use `SomeType[][][]` instead.",
				'[[]]':
					"Don't use `[[]]`. It only allows an array with a single element which is an empty array. Use `SomeType[][]` instead.",
				'[]': "Don't use the empty array type `[]`. It only allows empty arrays. Use `SomeType[]` instead.",
				Buffer: {
					message:
						'Use Uint8Array instead. See: https://sindresorhus.com/blog/goodbye-nodejs-buffer',
					suggest: ['Uint8Array'],
				},
				null: {
					fixWith: 'undefined',
					message: 'Use `undefined` instead. See: https://github.com/sindresorhus/meta/issues/7',
				},
				object: {
					fixWith: 'Record<string, unknown>',
					message:
						'The `object` type is hard to use. Use `Record<string, unknown>` instead. See: https://github.com/typescript-eslint/typescript-eslint/pull/848',
				},
			},
		},
	],
	'ts/no-this-alias': ['error', { allowDestructuring: true }],
	'ts/no-unnecessary-boolean-literal-compare': 'error',
	'ts/no-unnecessary-parameter-property-assignment': 'error',
	'ts/no-unnecessary-qualifier': 'error',
	'ts/no-unnecessary-type-arguments': 'error',
	'ts/no-unnecessary-type-assertion': 'error',
	'ts/no-unnecessary-type-constraint': 'error',
	'ts/no-unsafe-argument': 'error',
	'ts/no-unsafe-assignment': 'error',
	'ts/no-unsafe-call': 'error',
	'ts/no-unsafe-declaration-merging': 'error',
	'ts/no-unsafe-enum-comparison': 'error',
	'ts/no-unsafe-function-type': 'error',
	'ts/no-unsafe-return': 'error',
	'ts/no-unused-expressions': 'error',
	'ts/no-useless-constructor': 'error',
	'ts/no-useless-empty-export': 'error',
	// "@stylistic/padding-line-between-statements":["error",{"blankLine":"always","prev":"multiline-block-like","next":"*"}],
	'ts/no-wrapper-object-types': 'error',
	'ts/non-nullable-type-assertion-style': 'error',
	'ts/only-throw-error': ['error', { allowThrowingAny: false, allowThrowingUnknown: true }],
	'ts/parameter-properties': ['error', { prefer: 'parameter-property' }],
	'ts/prefer-as-const': 'error',
	'ts/prefer-find': 'error',
	'ts/prefer-for-of': 'error',
	'ts/prefer-function-type': 'error',
	'ts/prefer-includes': 'error',
	'ts/prefer-literal-enum-member': 'error',
	'ts/prefer-namespace-keyword': 'error',
	'ts/prefer-nullish-coalescing': [
		'error',
		{
			ignoreConditionalTests: false,
			ignoreMixedLogicalExpressions: false,
			ignoreTernaryTests: false,
		},
	],
	'ts/prefer-optional-chain': 'error',
	'ts/prefer-promise-reject-errors': 'error',
	'ts/prefer-readonly': 'error',
	'ts/prefer-reduce-type-parameter': 'error',
	// "@stylistic/type-annotation-spacing":"error",
	'ts/prefer-regexp-exec': 'error',
	'ts/prefer-return-this-type': 'error',
	'ts/prefer-string-starts-ends-with': 'error',
	'ts/promise-function-async': 'error',
	'ts/require-array-sort-compare': ['error', { ignoreStringArrays: true }],
	// "@stylistic/quotes":["error","single"],
	'ts/restrict-plus-operands': ['error', { allowAny: false }],
	'ts/restrict-template-expressions': ['error', { allowNumber: true }],
	'ts/return-await': 'error',
	'ts/switch-exhaustiveness-check': [
		'error',
		{
			allowDefaultCaseForExhaustiveSwitch: false,
			requireDefaultForNonUnion: true,
		},
	],
	'ts/triple-slash-reference': ['error', { lib: 'never', path: 'never', types: 'never' }],
	'ts/unified-signatures': ['error', { ignoreDifferentlyNamedParameters: true }],
	'ts/use-unknown-in-catch-callback-variable': 'error',
	// End expansion
}

// eslint-disable-next-line ts/no-unused-vars
const xoTypescriptDtsRules: Rules = {
	// Begin expansion 'eslint-config-xo-typescript' '[2].rules'
	'ts/no-unused-vars': 'off',
	// End expansion
}

// eslint-disable-next-line ts/no-unused-vars
const xoTypescriptTestRules: Rules = {
	// Begin expansion 'eslint-config-xo-typescript' '[3].rules'
	'ts/no-confusing-void-expression': 'off',
	'ts/no-unsafe-call': 'off',
	// End expansion
}

// eslint-disable-next-line ts/no-unused-vars
const xoTsxRules: Rules = {
	// Begin expansion 'eslint-config-xo-typescript' '[4].rules'
	'ts/naming-convention': [
		'error',
		{
			filter: { match: false, regex: '[- ]' },
			format: ['strictCamelCase', 'StrictPascalCase'],
			leadingUnderscore: 'allowSingleOrDouble',
			selector: [
				'variable',
				'function',
				'classProperty',
				'objectLiteralProperty',
				'parameterProperty',
				'classMethod',
				'objectLiteralMethod',
				'typeMethod',
				'accessor',
			],
			trailingUnderscore: 'allow',
		},
		{ format: ['StrictPascalCase'], selector: 'typeLike' },
		{
			format: ['StrictPascalCase'],
			prefix: ['is', 'has', 'can', 'should', 'will', 'did'],
			selector: 'variable',
			types: ['boolean'],
		},
		{
			filter: '^(?!I)[A-Z]',
			format: ['StrictPascalCase'],
			selector: 'interface',
		},
		{
			filter: '^T$|^[A-Z][a-zA-Z]+$',
			format: ['StrictPascalCase'],
			selector: 'typeParameter',
		},
		{
			format: null,
			modifiers: ['requiresQuotes'],
			selector: ['classProperty', 'objectLiteralProperty'],
		},
	],
	// End expansion
}

const importRecommendedRules: Rules = {
	// Begin expansion 'eslint-plugin-import-x' 'recommended'
	'import/default': 'error',
	'import/export': 'error',
	'import/named': 'error',
	'import/namespace': 'error',
	'import/no-duplicates': 'warn',
	'import/no-named-as-default': 'warn',
	'import/no-named-as-default-member': 'warn',
	'import/no-unresolved': 'error',
	// End expansion
}

const importTypescriptRules: Rules = {
	// Begin expansion 'eslint-plugin-import-x' 'typescript'
	'import/named': 'off',
	// End expansion
}

const perfectionistRecommendedNaturalRules: Rules = {
	// Begin expansion 'eslint-plugin-perfectionist' 'recommended-natural'
	'perfectionist/sort-array-includes': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-classes': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-decorators': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-enums': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-exports': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-heritage-clauses': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-imports': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-interfaces': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-intersection-types': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-jsx-props': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-maps': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-modules': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-named-exports': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-named-imports': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-object-types': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-objects': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-sets': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-switch-case': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-union-types': ['error', { order: 'asc', type: 'natural' }],
	'perfectionist/sort-variable-declarations': ['error', { order: 'asc', type: 'natural' }],
	// End expansion
}

const jsdocCommentsRecommendedTypescriptFlavorRules: Rules = {
	// Begin expansion 'eslint-plugin-jsdoc' 'flat/recommended-typescript-flavor'
	'jsdoc/check-access': 'warn',
	'jsdoc/check-alignment': 'warn',
	'jsdoc/check-examples': 'off',
	'jsdoc/check-indentation': 'off',
	'jsdoc/check-line-alignment': 'off',
	'jsdoc/check-param-names': 'warn',
	'jsdoc/check-property-names': 'warn',
	'jsdoc/check-syntax': 'off',
	'jsdoc/check-tag-names': 'warn',
	'jsdoc/check-template-names': 'off',
	'jsdoc/check-types': 'warn',
	'jsdoc/check-values': 'warn',
	'jsdoc/convert-to-jsdoc-comments': 'off',
	'jsdoc/empty-tags': 'warn',
	'jsdoc/implements-on-classes': 'warn',
	'jsdoc/imports-as-dependencies': 'off',
	'jsdoc/informative-docs': 'off',
	'jsdoc/lines-before-block': 'off',
	'jsdoc/match-description': 'off',
	'jsdoc/match-name': 'off',
	'jsdoc/multiline-blocks': 'warn',
	'jsdoc/no-bad-blocks': 'off',
	'jsdoc/no-blank-block-descriptions': 'off',
	'jsdoc/no-blank-blocks': 'off',
	'jsdoc/no-defaults': 'warn',
	'jsdoc/no-missing-syntax': 'off',
	'jsdoc/no-multi-asterisks': 'warn',
	'jsdoc/no-restricted-syntax': 'off',
	'jsdoc/no-types': 'off',
	'jsdoc/no-undefined-types': 'off',
	'jsdoc/require-asterisk-prefix': 'off',
	'jsdoc/require-description': 'off',
	'jsdoc/require-description-complete-sentence': 'off',
	'jsdoc/require-example': 'off',
	'jsdoc/require-file-overview': 'off',
	'jsdoc/require-hyphen-before-param-description': 'off',
	'jsdoc/require-jsdoc': 'warn',
	'jsdoc/require-param': 'warn',
	'jsdoc/require-param-description': 'warn',
	'jsdoc/require-param-name': 'warn',
	'jsdoc/require-param-type': 'warn',
	'jsdoc/require-property': 'warn',
	'jsdoc/require-property-description': 'warn',
	'jsdoc/require-property-name': 'warn',
	'jsdoc/require-property-type': 'warn',
	'jsdoc/require-returns': 'warn',
	'jsdoc/require-returns-check': 'warn',
	'jsdoc/require-returns-description': 'warn',
	'jsdoc/require-returns-type': 'warn',
	'jsdoc/require-template': 'off',
	'jsdoc/require-throws': 'off',
	'jsdoc/require-yields': 'warn',
	'jsdoc/require-yields-check': 'warn',
	'jsdoc/sort-tags': 'off',
	'jsdoc/tag-lines': 'warn',
	'jsdoc/text-escaping': 'off',
	'jsdoc/valid-types': 'warn',
	// End expansion
}

const jsdocCommentsRecommendedTypescriptRules: Rules = {
	// Begin expansion 'eslint-plugin-jsdoc' 'flat/recommended-typescript'
	'jsdoc/check-access': 'warn',
	'jsdoc/check-alignment': 'warn',
	'jsdoc/check-examples': 'off',
	'jsdoc/check-indentation': 'off',
	'jsdoc/check-line-alignment': 'off',
	'jsdoc/check-param-names': 'warn',
	'jsdoc/check-property-names': 'warn',
	'jsdoc/check-syntax': 'off',
	'jsdoc/check-tag-names': ['warn', { typed: true }],
	'jsdoc/check-template-names': 'off',
	'jsdoc/check-types': 'warn',
	'jsdoc/check-values': 'warn',
	'jsdoc/convert-to-jsdoc-comments': 'off',
	'jsdoc/empty-tags': 'warn',
	'jsdoc/implements-on-classes': 'warn',
	'jsdoc/imports-as-dependencies': 'off',
	'jsdoc/informative-docs': 'off',
	'jsdoc/lines-before-block': 'off',
	'jsdoc/match-description': 'off',
	'jsdoc/match-name': 'off',
	'jsdoc/multiline-blocks': 'warn',
	'jsdoc/no-bad-blocks': 'off',
	'jsdoc/no-blank-block-descriptions': 'off',
	'jsdoc/no-blank-blocks': 'off',
	'jsdoc/no-defaults': 'warn',
	'jsdoc/no-missing-syntax': 'off',
	'jsdoc/no-multi-asterisks': 'warn',
	'jsdoc/no-restricted-syntax': 'off',
	'jsdoc/no-types': 'warn',
	'jsdoc/no-undefined-types': 'off',
	'jsdoc/require-asterisk-prefix': 'off',
	'jsdoc/require-description': 'off',
	'jsdoc/require-description-complete-sentence': 'off',
	'jsdoc/require-example': 'off',
	'jsdoc/require-file-overview': 'off',
	'jsdoc/require-hyphen-before-param-description': 'off',
	'jsdoc/require-jsdoc': 'warn',
	'jsdoc/require-param': 'warn',
	'jsdoc/require-param-description': 'warn',
	'jsdoc/require-param-name': 'warn',
	'jsdoc/require-param-type': 'off',
	'jsdoc/require-property': 'warn',
	'jsdoc/require-property-description': 'warn',
	'jsdoc/require-property-name': 'warn',
	'jsdoc/require-property-type': 'off',
	'jsdoc/require-returns': 'warn',
	'jsdoc/require-returns-check': 'warn',
	'jsdoc/require-returns-description': 'warn',
	'jsdoc/require-returns-type': 'off',
	'jsdoc/require-template': 'off',
	'jsdoc/require-throws': 'off',
	'jsdoc/require-yields': 'warn',
	'jsdoc/require-yields-check': 'warn',
	'jsdoc/sort-tags': 'off',
	'jsdoc/tag-lines': 'warn',
	'jsdoc/text-escaping': 'off',
	'jsdoc/valid-types': 'warn',
	// End expansion
}

const eslintCommentsRecommendedRules: Rules = {
	// Begin expansion '@eslint-community/eslint-plugin-eslint-comments' 'recommended'
	'eslint-comments/disable-enable-pair': 'error',
	'eslint-comments/no-aggregating-enable': 'error',
	'eslint-comments/no-duplicate-disable': 'error',
	'eslint-comments/no-unlimited-disable': 'error',
	'eslint-comments/no-unused-enable': 'error',
	// End expansion
}

const regexpRecommendedRules: Rules = {
	// Begin expansion 'eslint-plugin-regexp' 'flat/recommended'
	'no-control-regex': 'error',
	'no-empty-character-class': 'off',
	'no-invalid-regexp': 'off',
	'no-misleading-character-class': 'error',
	'no-regex-spaces': 'error',
	'no-useless-backreference': 'off',
	'prefer-regex-literals': 'error',
	'regexp/confusing-quantifier': 'warn',
	'regexp/control-character-escape': 'error',
	'regexp/match-any': 'error',
	'regexp/negation': 'error',
	'regexp/no-contradiction-with-assertion': 'error',
	'regexp/no-dupe-characters-character-class': 'error',
	'regexp/no-dupe-disjunctions': 'error',
	'regexp/no-empty-alternative': 'warn',
	'regexp/no-empty-capturing-group': 'error',
	'regexp/no-empty-character-class': 'error',
	'regexp/no-empty-group': 'error',
	'regexp/no-empty-lookarounds-assertion': 'error',
	'regexp/no-empty-string-literal': 'error',
	'regexp/no-escape-backspace': 'error',
	'regexp/no-extra-lookaround-assertions': 'error',
	'regexp/no-invalid-regexp': 'error',
	'regexp/no-invisible-character': 'error',
	'regexp/no-lazy-ends': 'warn',
	'regexp/no-legacy-features': 'error',
	'regexp/no-misleading-capturing-group': 'error',
	'regexp/no-misleading-unicode-character': 'error',
	'regexp/no-missing-g-flag': 'error',
	'regexp/no-non-standard-flag': 'error',
	'regexp/no-obscure-range': 'error',
	'regexp/no-optional-assertion': 'error',
	'regexp/no-potentially-useless-backreference': 'warn',
	'regexp/no-super-linear-backtracking': 'error',
	'regexp/no-trivially-nested-assertion': 'error',
	'regexp/no-trivially-nested-quantifier': 'error',
	'regexp/no-unused-capturing-group': 'error',
	'regexp/no-useless-assertions': 'error',
	'regexp/no-useless-backreference': 'error',
	'regexp/no-useless-character-class': 'error',
	'regexp/no-useless-dollar-replacements': 'error',
	'regexp/no-useless-escape': 'error',
	'regexp/no-useless-flag': 'warn',
	'regexp/no-useless-lazy': 'error',
	'regexp/no-useless-non-capturing-group': 'error',
	'regexp/no-useless-quantifier': 'error',
	'regexp/no-useless-range': 'error',
	'regexp/no-useless-set-operand': 'error',
	'regexp/no-useless-string-literal': 'error',
	'regexp/no-useless-two-nums-quantifier': 'error',
	'regexp/no-zero-quantifier': 'error',
	'regexp/optimal-lookaround-quantifier': 'warn',
	'regexp/optimal-quantifier-concatenation': 'error',
	'regexp/prefer-character-class': 'error',
	'regexp/prefer-d': 'error',
	'regexp/prefer-plus-quantifier': 'error',
	'regexp/prefer-predefined-assertion': 'error',
	'regexp/prefer-question-quantifier': 'error',
	'regexp/prefer-range': 'error',
	'regexp/prefer-set-operation': 'error',
	'regexp/prefer-star-quantifier': 'error',
	'regexp/prefer-unicode-codepoint-escapes': 'error',
	'regexp/prefer-w': 'error',
	'regexp/simplify-set-operations': 'error',
	'regexp/sort-flags': 'error',
	'regexp/strict': 'error',
	'regexp/use-ignore-case': 'error',
	// End expansion
}

const dependRecommendedRules: Rules = {
	// Begin expansion 'eslint-plugin-depend' 'recommended'
	'depend/ban-dependencies': 'error',
	// End expansion
}

// ---------

/**
 * Recommended rules from the readme, but no preset config is exported from the
 * plugin. Using built-in approach instead pending
 * https://github.com/sweepline/eslint-plugin-unused-imports/issues/50
 * TODO What about react?
 * @see https://github.com/sweepline/eslint-plugin-unused-imports
 */
// const kpUnusedImportsRules: Rules = {
//   'no-unused-vars': 'off', // Or "@typescript-eslint/no-unused-vars": "off",
//   'unused-imports/no-unused-imports': 'error',
//   'unused-imports/no-unused-vars': [
//     'warn',
//     {
//       args: 'after-used',
//       argsIgnorePattern: '^_',
//       vars: 'all',
//       varsIgnorePattern: '^_',
//     },
//   ],
// }

// TODO revisit these...
const kpSharedScriptRules: Rules = {
	'eslint-comments/disable-enable-pair': ['error', { allowWholeFile: true }],
	// 'node/handle-callback-err': ['error', '^(err|error)$'],
	// 'node/no-new-require': 'error',
	// 'node/no-path-concat': 'error',
	// 'node/prefer-global/buffer': ['error', 'never'],
	// 'node/prefer-global/process': ['error', 'never'],
	// 'node/process-exit-as-throw': 'error',
	'jsdoc/require-description': ['error', { descriptionStyle: 'body' }],
	'jsdoc/require-jsdoc': [
		'error',
		{
			publicOnly: true,
		},
	],
	'no-await-in-loop': 'off',
	'no-warning-comments': 'off',
	'node/hashbang': 'off',
	'node/no-extraneous-import': 'off',
	'node/no-missing-import': 'off',
	'node/no-process-exit': 'off', // Duplicated in unicorn
	'node/no-unsupported-features/node-builtins': ['error', { ignores: ['fs/promises.glob'] }],
	'perfectionist/sort-objects': [
		'error',
		{ newlinesBetween: 'never', order: 'asc', type: 'natural' },
	],
	'ts/no-non-null-assertion': 'off',
}

const kpSharedDisableTypeCheckedRules: Rules = {
	'jsdoc/check-tag-names': ['error', { typed: false }],
	'jsdoc/no-types': 'off',
}

/* eslint-enable ts/naming-convention */

/**
 * Rules shared by JS and TS scripts
 * Partial rule set requires `files` and `languageOptions` keys to be set appropriately in file-specific configs.
 */
export const sharedScriptConfig: TypedFlatConfigItem = {
	plugins: {
		depend: pluginDepend,
		'eslint-comments': pluginEslintComments,
		import: pluginImport,
		jsdoc: pluginJsdocComments,
		node: pluginNode,
		perfectionist: pluginPerfectionist,
		regexp: pluginRegexp,
		ts: pluginTs,
		unicorn: pluginUnicorn,
	},
	rules: {
		...eslintJavascriptRecommendedRules,
		...eslintTypescriptRecommendedOverridesRules,
		...eslintTypescriptStrictTypeCheckedRules,
		...eslintTypescriptStylisticTypeCheckedRules,
		...nodeRecommendedRules,
		...unicornRecommendedRules,
		...xoJavascriptRules,
		...xoTypescriptRules,
		...importRecommendedRules,
		...importTypescriptRules,
		...perfectionistRecommendedNaturalRules,
		...jsdocCommentsRecommendedTypescriptFlavorRules,
		...jsdocCommentsRecommendedTypescriptRules,
		...eslintCommentsRecommendedRules,
		...regexpRecommendedRules,
		...dependRecommendedRules,
		...kpSharedScriptRules,
	},
	settings: {
		// Do NOT need to rename these settings
		// From pluginImport.flatConfigs.typescript.settings,
		'import-x/extensions': ['.ts', '.tsx', '.cts', '.mts', '.js', '.jsx', '.cjs', '.mjs'],
		'import-x/external-module-folders': ['node_modules', 'node_modules/@types'],
		'import-x/parsers': {
			'@typescript-eslint/parser': ['.ts', '.tsx', '.cts', '.mts'],
		},
		'import-x/resolver': { typescript: true },
	},
}

/**
 * Disable typechecked rules shared by JS and TS scripts
 */
export const sharedScriptDisableTypeCheckedRules: Rules = {
	...eslintTypescriptDisableTypeCheckedRules,
	...kpSharedDisableTypeCheckedRules,
}
